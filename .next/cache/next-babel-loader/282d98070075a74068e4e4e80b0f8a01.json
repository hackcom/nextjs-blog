{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst postsDirectory = path.join(process.cwd(), 'posts');\n\nconst getFileNames = () => fs.readdirSync(postsDirectory);\n\nconst getIdFromFileName = fileName => fileName.replace(/\\.md$/, '');\n\nconst getFullPath = fileName => path.join(postsDirectory, fileName);\n\nconst getFileContents = filePath => fs.readFileSync(filePath, 'utf-8');\n\nexport function getSortedPostsData() {\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    const id = getIdFromFileName(fileName);\n    const fullPath = getFullPath(fileName);\n    const fileContents = getFileContents(fullPath);\n    const matterResult = matter(fileContents);\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  });\n  return allPostsData.sort((a, b) => a.date < b.date ? 1 : -1);\n}\nexport function getAllPostIds() {\n  const fileNames = getFileNames();\n  return fileNames.map(fileName => ({\n    params: {\n      id: getIdFromFileName(fileName)\n    }\n  }));\n}\nexport async function getPostData(id) {\n  const fullPath = getFullPath(`${id}.md`);\n  const fileContents = getFileContents(fullPath);\n  const matterResult = matter(fileContents);\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":null,"metadata":{},"sourceType":"module"}