{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst postsDirectory = path.join(process.cwd(), 'posts');\n\nconst getFileNames = () => fs.readdirSync(postsDirectory);\n\nconst getIdFromFileName = fileName => fileName.replace(/\\.md$/, '');\n\nconst getFullPath = fileName => path.join(postsDirectory, fileName);\n\nconst getFileContents = filePath => fs.readFileSync(filePath, 'utf-8');\n\nexport function getSortedPostsData() {\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    const id = getIdFromFileName(fileName);\n    const fullPath = getFullPath(fileName);\n    const fileContents = getFileContents(fullPath);\n    const matterResult = matter(fileContents);\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  });\n  return allPostsData.sort((a, b) => a.date < b.date ? 1 : -1);\n}\nexport function getAllPostIds() {\n  const fileNames = getFileNames();\n  return fileNames.map(fileName => ({\n    params: {\n      id: getIdFromFileName(fileName)\n    }\n  }));\n}\nexport async function getPostData(id) {\n  const fullPath = getFullPath(`${id}.md`);\n  const fileContents = getFileContents(fullPath);\n  const matterResult = matter(fileContents);\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["D:/TestProject/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getFileNames","readdirSync","getIdFromFileName","fileName","replace","getFullPath","getFileContents","filePath","readFileSync","getSortedPostsData","fileNames","allPostsData","map","id","fullPath","fileContents","matterResult","data","sort","a","b","date","getAllPostIds","params","getPostData","processedContent","use","content","contentHtml","toString"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;;AACA,MAAMC,YAAY,GAAG,MAAMT,EAAE,CAACU,WAAH,CAAeL,cAAf,CAA3B;;AACA,MAAMM,iBAAiB,GAAGC,QAAQ,IAAIA,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAtC;;AACA,MAAMC,WAAW,GAAGF,QAAQ,IAAIX,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA0BO,QAA1B,CAAhC;;AACA,MAAMG,eAAe,GAAGC,QAAQ,IAAIhB,EAAE,CAACiB,YAAH,CAAgBD,QAAhB,EAA0B,OAA1B,CAApC;;AAEA,OAAO,SAASE,kBAAT,GAA6B;AAClC,QAAMC,SAAS,GAAGnB,EAAE,CAACU,WAAH,CAAeL,cAAf,CAAlB;AACA,QAAMe,YAAY,GAAGD,SAAS,CAACE,GAAV,CAAcT,QAAQ,IAAI;AAC7C,UAAMU,EAAE,GAAGX,iBAAiB,CAACC,QAAD,CAA5B;AACA,UAAMW,QAAQ,GAAGT,WAAW,CAACF,QAAD,CAA5B;AACA,UAAMY,YAAY,GAAGT,eAAe,CAACQ,QAAD,CAApC;AAEA,UAAME,YAAY,GAAGvB,MAAM,CAACsB,YAAD,CAA3B;AAEA;AACEF,MAAAA;AADF,OAEKG,YAAY,CAACC,IAFlB;AAID,GAXoB,CAArB;AAaA,SAAON,YAAY,CAACO,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAAnD,CAAP;AACD;AAED,OAAO,SAASC,aAAT,GAAwB;AAC7B,QAAMZ,SAAS,GAAGV,YAAY,EAA9B;AACA,SAAOU,SAAS,CAACE,GAAV,CAAcT,QAAQ,KAAK;AAChCoB,IAAAA,MAAM,EAAE;AACNV,MAAAA,EAAE,EAAEX,iBAAiB,CAACC,QAAD;AADf;AADwB,GAAL,CAAtB,CAAP;AAKD;AAED,OAAO,eAAeqB,WAAf,CAA2BX,EAA3B,EAA8B;AACnC,QAAMC,QAAQ,GAAGT,WAAW,CAAE,GAAEQ,EAAG,KAAP,CAA5B;AACA,QAAME,YAAY,GAAGT,eAAe,CAACQ,QAAD,CAApC;AACA,QAAME,YAAY,GAAGvB,MAAM,CAACsB,YAAD,CAA3B;AACA,QAAMU,gBAAgB,GAAG,MAAM/B,MAAM,GAAGgC,GAAT,CAAa/B,IAAb,EAAmBG,OAAnB,CAA2BkB,YAAY,CAACW,OAAxC,CAA/B;AACA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB;AAEA;AAAQhB,IAAAA,EAAR;AAAYe,IAAAA;AAAZ,KAA4BZ,YAAY,CAACC,IAAzC;AACD","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport matter from 'gray-matter';\r\nimport remark from 'remark';\r\nimport html from 'remark-html';\r\n\r\nconst postsDirectory = path.join(process.cwd(), 'posts');\r\nconst getFileNames = () => fs.readdirSync(postsDirectory);\r\nconst getIdFromFileName = fileName => fileName.replace(/\\.md$/, '');\r\nconst getFullPath = fileName => path.join(postsDirectory, fileName);\r\nconst getFileContents = filePath => fs.readFileSync(filePath, 'utf-8');\r\n\r\nexport function getSortedPostsData(){\r\n  const fileNames = fs.readdirSync(postsDirectory);\r\n  const allPostsData = fileNames.map(fileName => {\r\n    const id = getIdFromFileName(fileName);\r\n    const fullPath = getFullPath(fileName);\r\n    const fileContents = getFileContents(fullPath);\r\n\r\n    const matterResult = matter(fileContents);\r\n\r\n    return {\r\n      id,\r\n      ...matterResult.data\r\n    };\r\n  });\r\n\r\n  return allPostsData.sort((a, b) => a.date < b.date ? 1 : -1);\r\n}\r\n\r\nexport function getAllPostIds(){\r\n  const fileNames = getFileNames();\r\n  return fileNames.map(fileName => ({\r\n    params: {\r\n      id: getIdFromFileName(fileName)\r\n    }\r\n  }));\r\n}\r\n\r\nexport async function getPostData(id){\r\n  const fullPath = getFullPath(`${id}.md`);\r\n  const fileContents = getFileContents(fullPath);\r\n  const matterResult = matter(fileContents);\r\n  const processedContent = await remark().use(html).process(matterResult.content);\r\n  const contentHtml = processedContent.toString();\r\n\r\n  return {id, contentHtml, ...matterResult.data};\r\n}"]},"metadata":{},"sourceType":"module"}